// <auto-generated />
using System;
using DiveLog.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiveLog.Migrations
{
    [DbContext(typeof(DiveContext))]
    partial class DiveContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DiveLog.Models.DiveSite", b =>
                {
                    b.Property<int>("DiveSiteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Altitude")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StProv")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("DiveSiteID");

                    b.ToTable("DiveSites");
                });

            modelBuilder.Entity("DiveLog.Models.Diver", b =>
                {
                    b.Property<int>("DiverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CertificateAuthority")
                        .IsRequired()
                        .HasColumnType("varchar(1) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiveCertID")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("DiverID");

                    b.ToTable("Divers");
                });

            modelBuilder.Entity("DiveLog.Models.DiverLog", b =>
                {
                    b.Property<int>("DiverLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BottomTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("DiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiveNumber")
                        .HasColumnType("int");

                    b.Property<int>("DiveSiteID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DiveStartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DiveStopTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiverID")
                        .HasColumnType("int");

                    b.Property<int>("MaxDepth")
                        .HasColumnType("int");

                    b.Property<string>("PressureGroupEntry")
                        .IsRequired()
                        .HasColumnType("varchar(1) CHARACTER SET utf8mb4");

                    b.Property<string>("PressureGroupExit")
                        .IsRequired()
                        .HasColumnType("varchar(1) CHARACTER SET utf8mb4");

                    b.Property<int>("SafetyStopDepth")
                        .HasColumnType("int");

                    b.Property<int>("SafetyStopTime")
                        .HasColumnType("int");

                    b.Property<int>("SurfaceInterval")
                        .HasColumnType("int");

                    b.Property<int>("TankEndPSI")
                        .HasColumnType("int");

                    b.Property<int>("TankStartPSI")
                        .HasColumnType("int");

                    b.Property<int>("WaterTemp")
                        .HasColumnType("int");

                    b.HasKey("DiverLogID");

                    b.HasIndex("DiveSiteID");

                    b.HasIndex("DiverID");

                    b.ToTable("DiverLogs");
                });

            modelBuilder.Entity("DiveLog.Models.DiverLog", b =>
                {
                    b.HasOne("DiveLog.Models.DiveSite", "DiveSite")
                        .WithMany("WaterLovers")
                        .HasForeignKey("DiveSiteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiveLog.Models.Diver", "Diver")
                        .WithMany("DiverLogs")
                        .HasForeignKey("DiverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
